name: $(BuildId)

trigger:
  branches:
    exclude:
    - '*'

variables:
  MINIMUM_VERSION: {% if is_prerelease %}0.1.0{% else %}1.0.0{% endif %}
{%- if container_registry_type == "Azure Container Registry" %}
  AcrName: {{ acr_name }}
  AcrChartPrefix: {{ acr_chart_prefix }}
{%- endif %}
{%- if acr_login_method == "Admin Credentials via Service Connection" %}
  AcrAzSubscriptionServiceConnection: {{ acr_service_connection }}
{%- endif %}
  ChartName: {{ helm_chart_name }}

pool:
  vmImage: ubuntu-latest

stages:
  - stage: release
    displayName: Release
    jobs:
      - job: release
        displayName: Release Chart
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true
          - task: UseNode@1
            inputs:
              version: 20.x
            displayName: Install Node
          - task: HelmInstaller@1
            displayName: Install Helm
            inputs: 
              helmVersionToInstall: latest
          - pwsh: |
              git config user.email "azuredevops@microsoft.com"
              git config user.name "Azure DevOps"

              $TempFilePath = "version-tempfile-for-ci-output.txt"
              New-Item -ItemType File -Path $TempFilePath | Out-Null
              $LatestTag = git tag -l "v*" --sort "-v:refname" | Select-Object -First 1
              if ($null -eq $LatestTag) {
                Write-Host "No existing tags found. Will release with minimum version '$env:MINIMUM_VERSION'."
                npx --yes commit-and-tag-version --release-as $env:MINIMUM_VERSION
              } else {
                $LatestVersion = $LatestTag.Substring(1)
                if ([System.Version]$LatestVersion -ge [System.Version]$env:MINIMUM_VERSION) {
                  Write-Host "Latest version from tags is '$LatestVersion', which is greater than or equal to minimum version '$env:MINIMUM_VERSION'. New version will be automatically calculated."
                  npx --yes commit-and-tag-version
                } else {
                  Write-Host "Latest version from tags is '$LatestVersion', which is less than minimum version '$env:MINIMUM_VERSION'. Minimum version will be forced."
                  npx --yes commit-and-tag-version --release-as $env:MINIMUM_VERSION
                }
              }
              Write-Host "##vso[task.setvariable variable=newversion;]$(Get-Content -Path $TempFilePath)"
              Remove-Item -Path $TempFilePath

              npx --yes extract-changelog-release | Out-File -FilePath $env:AGENT_TEMPDIRECTORY/releasenotes.txt
            failOnStderr: false # Git writes to stderr normally
            displayName: Run 'commit-and-tag-version'
          - pwsh: yq eval -i '.version = "$(newversion)"' Chart.yaml
            failOnStderr: true
            displayName: Set Version in Chart
            workingDirectory: src/$(ChartName)
        {%- if container_registry_type == "Azure Container Registry" %}
        {%- if acr_login_method == "Admin Credentials via Service Connection" %}
          - task: AzureCLI@2
            displayName: Authenticate to ACR
            inputs:
              azureSubscription: $(AcrAzSubscriptionServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $CredsJson = az acr credential show --name $(AcrName) --only-show-errors
                $CredsObject = ConvertFrom-Json ($CredsJson -join "`n")
                helm registry login $(AcrName).azurecr.io --username $CredsObject.username --password $CredsObject.passwords[0].value
        {%- endif %}
        {%- if acr_login_method == "Admin Credentials via Pipeline Variable" %}
          - pwsh: |
              helm registry login $(AcrName).azurecr.io --username $(AcrName) --password $env:AcrPassword
            displayName: Authenticate to ACR
            env:
              AcrPassword: $(AcrPasswordSecret)
        {%- endif %}
        {%- endif %}
          - pwsh: |
              helm package src/$(ChartName) --dependency-update
              $TgzPath = (Get-ChildItem -Filter *.tgz).FullName
              helm push $TgzPath oci://$(AcrName).azurecr.io/helm/$(AcrChartPrefix)
            failOnStderr: false # Helm writes to stderr during push normally
            displayName: Package & Push Chart
          - pwsh: |
              git config user.email "azuredevops@microsoft.com"
              git config user.name "Azure DevOps"
              git checkout -b release/$(newversion)
              git add --all
              git commit -m "chore: release v$(newversion) [skip ci]"
              git tag v$(newversion)
              git push --set-upstream origin release/$(newversion)
              git push origin --tags
            failOnStderr: false # Git writes to stderr normally
            displayName: Write Changes Back to Repo
          - pwsh: |
              $TokenBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("user:$env:SYSTEM_ACCESSTOKEN"))

              $IDSplat = @{
                Uri = "$(System.CollectionUri)/_apis/connectionData"
                Method = "GET"
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $TokenBase64"
                }
              }
              $IDResponse = Invoke-RestMethod @IDSplat
              $ReviewerID = $IDResponse.authenticatedUser.id

              $CreateSplat = @{
                Uri = "$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=7.0"
                Method = "POST"
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $TokenBase64"
                }
                Body = ConvertTo-Json @{
                  sourceRefName = "refs/heads/release/$(newversion)"
                  targetRefName = "$(Build.SourceBranch)"
                  title = "chore: release v$(newversion)"
                  description = "Release v$(newversion)"
                }
              }
              $CreateResponse = Invoke-RestMethod @CreateSplat
              $PullRequestID = $CreateResponse.pullRequestId

              Start-Sleep -Seconds 5

              $ApproveSplat = @{
                Uri = "$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests/" + $PullRequestID + "/reviewers/" + $ReviewerID + "?api-version=7.0"
                Method = "PUT"
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $TokenBase64"
                }
                Body = ConvertTo-Json @{
                  hasDeclined = $false
                  id = $ReviewerID
                  vote = 10
                }
              }
              Write-Host $ApproveSplat.Uri
              Invoke-RestMethod @ApproveSplat | Out-Null

              Start-Sleep -Seconds 5

              $MergeSplat = @{
                Uri = "$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests/" + $PullRequestID + "?api-version=7.0"
                Method = "PATCH"
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $TokenBase64"
                }
                Body = ConvertTo-Json @{
                  lastMergeSourceCommit = @{
                    commitId = $CreateResponse.lastMergeSourceCommit.commitId
                  }
                  status = "completed"
                  completionOptions = @{
                    bypassPolicy = $true
                    bypassReason = "Automated version number update"
                    deleteSourceBranch = $true
                    mergeCommitMessage = "chore: release v$(newversion) [skip ci]"
                    mergeStrategy = "noFastForward"
                  }
                }
              }
              Write-Host $MergeSplat.Uri
              Invoke-RestMethod @MergeSplat | Out-Null
            failOnStderr: true
            displayName: Create & Merge Pull Request
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)